"""
Django settings for litchi_backend project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import json
import datetime
from dateutil.relativedelta import relativedelta
from django.core.exceptions import ImproperlyConfigured
from django.conf import global_settings
from elasticapm.conf.constants import BASE_SANITIZE_FIELD_NAMES, HARDCODED_PROCESSORS, _starmatch_to_regex

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
# SITE_ID = 1

INSTALLED_APPS = [
    'admin_view_permission',
    'auditlog',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'rest_framework',
    'rest_framework_swagger',
    'rest_auth',
    'rest_auth.registration',
    'axes',
    'corsheaders',
    'storages',
    'api.bases.users.social.kakao',
    'api.bases.users.social.naver',
    'api.bases.users',
    'api.bases.funds',
    'api.bases.etf_us',
    'api.bases.etf_kr',
    'api.bases.portfolios',
    'api.bases.sms',
    'api.bases.authentications',
    'api.bases.notifications',
    'api.bases.contracts',
    'api.bases.orders',
    'api.bases.agreements',
    'api.bases.reports',
    'api.bases.tendencies',
]

MIDDLEWARE = [
    'common.middleware.PostMetaMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'auditlog.middleware.AuditlogMiddleware'
]

ROOT_URLCONF = 'litchi_backend.urls'
CORS_ORIGIN_ALLOW_ALL = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'litchi_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
    {'NAME': 'common.password_validation.SpecialCharacterPasswordValidator', },
    {'NAME': 'common.password_validation.AlphabetPasswordValidator', },
    {'NAME': 'common.password_validation.PreviousSamePasswordValidator', }
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, '../static')

LOG_DIR_PATH = os.path.join(os.getcwd(), 'logs')

if not os.path.exists(LOG_DIR_PATH):
    os.mkdir(LOG_DIR_PATH)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.request': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(levelname)s %(asctime)s pid: %(process)d] %(message)s',
        }
    },
    'handlers': {
        'django.request': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'django.request',
            'filters': ['require_debug_true']
        },
        'django.server': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': "midnight",
            'backupCount': 0,
            'encoding': 'UTF-8',
            'formatter': 'django.request',
            'filename': 'logs/server.log'
        },
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'django.request',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['django.request', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['django.server', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'common.authentication.auth.ExpiringTokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'common.authentication.auth.BasicAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'common.pagenator.StandardPagination',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_THROTTLE_RATES': {
        'sms_cert': '5/minute',
        'account_cert': '5/minute',
        'validate_email': '5/minute',
    }
}

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'common.authentication.backends.UserModelByCiBackend',
    'common.authentication.backends.UserModelBackend',
]

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic'
        },
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'LOGIN_URL': '/admin/login/',
    'LOGOUT_URL': '/admin/logout/',
    'USE_SESSION_AUTH': True
}

secret_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'secrets.json')

with open(secret_file, encoding='utf-8') as f:
    secrets = json.loads(f.read())


def get_secret(setting, secrets=secrets):
    """비밀 변수를 가져오거나 명시적 예외를 반환한다."""
    try:
        # if secrets.get(setting, None) else
        return secrets.get(setting) if secrets.get(setting, None) \
            else (getattr(global_settings, setting) if hasattr(global_settings, setting) else eval(setting))

        # return secrets[setting] if secrets[setting] else eval(setting)
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)


SECRET_KEY = get_secret('SECRET_KEY')
DATABASE_ROUTERS = ("common.db_routers.AppLabelBaseMappingRouter",)

JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=14),
    'JWT_VENDOR_EXPIRATION_DELTA': datetime.timedelta(days=36500),
    'JWT_PAYLOAD_HANDLER': 'common.utils.jwt_payload_handler',
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'common.utils.jwt_response_payload_handler'
}

AXES_FAILURE_LIMIT = 5
AXES_USERNAME_FORM_FIELD = 'email'
AXES_COOLOFF_TIME = datetime.timedelta(minutes=30)
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True
AXES_NEVER_LOCKOUT_WHITELIST = True
AXES_IP_WHITELIST = get_secret('AXES_IP_WHITELIST')

SMS_CONTACT_NUMBER = get_secret('SMS_CONTACT_NUMBER')
SMS_COMPANY_NAME = get_secret('SMS_COMPANY_NAME')

KFTC_CLIENT = get_secret('KFTC_CLIENT')
ARS_CLIENT = get_secret('ARS_CLIENT')
OWNER_CLIENT = get_secret('OWNER_CLIENT')
FIRMBANKING_CLIENT = get_secret('FIRMBANKING_CLIENT')
ACCOUNT_CLIENT = get_secret('ACCOUNT_CLIENT')
EA_OMS_CLIENT = get_secret('EA_OMS_CLIENT')
FEP_CLIENT = get_secret('FEP_CLIENT')
MESSAGE_CENTER_CLIENT = get_secret('MESSAGE_CENTER_CLIENT')

NOTIFICATIONS_SETTINGS = {
    'API_KEY': get_secret('NOTIFICATION_API_KEY'),
    'SMS_PREFIX': os.getenv('SMS_PREFIX', '[파운트]'),
    'DEFAULT_TOPICS': ['notification', 'news'],
    'APP_LINK_URL': os.getenv('APP_LINK_URL', 'https://f665r.app.goo.gl/tc4X'),
    'CONTRACT_TEL': os.getenv('CONTRACT_TEL', '1833-4656')
}

USE_CELERY = False

# Setting for celery
BROKER_URL = get_secret('REDIS_HOST')
BROKER_VHOST = '0'
EXTERNAL_BROKER_URL = get_secret('EXTERNAL_REDIS_HOST')
CELERY_BROKER_TRANSPORT_OPTIONS = {'master_name': 'redismaster'}
CELERY_RESULT_BACKEND = get_secret('REDIS_HOST')
CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = {'master_name': 'redismaster'}
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_REDIS_DB = 0

EXPIRING_TOKEN_LIFESPAN = 60 * 30

ENCRYPT_KEY = ENCRYPT_MIDDLEWARE_KEY = get_secret('ENCRYPT_MIDDLEWARE_KEY')

MEDIA_URL = '/media/'
MEDIA_ROOT = 'media'

SEED_IV = get_secret("SEED_IV")

ACCOUNT_USER_MODEL_USERNAME_FIELD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
REST_AUTH_TOKEN_MODEL = "api.bases.users.models.ExpiringToken"
REST_AUTH_SERIALIZERS = {
    'TOKEN_SERIALIZER': "api.versioned.v1.users.social.serializers.TokenSerializer"
}

SOCIALACCOUNT_ADAPTER = "api.versioned.v1.users.social.adapters.FountSocialAccountAdapter"

USE_REALTIME = os.getenv('USE_REALTIME', False)
FEP_API_BACKEND = os.getenv('FEP_API_BACKEND', 'http://localhost:8080')
FEP_HANAW_API_BACKEND = os.getenv('FEP_HANAW_API_BACKEND', 'http://localhost:8080')

SILENCED_SYSTEM_CHECKS = ["auth.W004"]

ACCOUNT_MULTIPLE_DUE_DAY = os.getenv('ACCOUNT_MULTIPLE_DUE_DAY', 20)
RESTRICT_TENDENCY_PER_DAY = os.getenv('RESTRICT_TENDENCY_PER_DAY', 3)

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760

# API 호출 시 JSON body에서 제외할 필드
SANITIZE_FIELD_NAMES = [
    "front_image",
    "encoded_image",
    "masked_image",
    "license_no",
    "customer_no",
    "photo_info"
]

BASE_SANITIZE_FIELD_NAMES += [_starmatch_to_regex(x) for x in SANITIZE_FIELD_NAMES]
HARDCODED_PROCESSORS += ["common.elasticapm.processors.sanitize_http_request_json_body"]

AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_REGION_NAME = 'ap-northeast-2'
AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = False
AWS_STORAGE_BUCKET_NAME = get_secret('AWS_STORAGE_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = AWS_STORAGE_BUCKET_NAME + '.s3.amazonaws.com'

AES_KEY = get_secret('AES_KEY')
