"""
Django settings for account project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

import environ
from corsheaders.defaults import default_headers

from common.utils import DotDict

ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent.parent
APPS_DIR = ROOT_DIR / "oms"
env = environ.Env()

READ_DOT_ENV_FILE = env.bool("DJANGO_READ_DOT_ENV_FILE", default=False)
if READ_DOT_ENV_FILE:
    # OS environment variables take precedence over variables from .env
    env.read_env(str(ROOT_DIR / ".env"))

# https://docs.djangoproject.com/en/dev/ref/settings/#debug
DEBUG = env.bool("DJANGO_DEBUG", False)

SITE_ID = 1

DATA_UPLOAD_MAX_NUMBER_FIELDS = None

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.humanize",
    "drf_yasg",
    "corsheaders",
    "rest_framework",
    "reversion",
    "django_celery_beat",
    "api.bases.accounts",
    "api.bases.orders",
    "api.bases.managements",
    "api.bases.infomax",
    "api.bases.litchi_users",
    "api.bases.users",
    "api.bases.portal",
    "api.bases.portfolio",
    "memoize",
    "django_extensions",
    "health_check",
    "health_check.cache",
    "health_check.storage",
    "health_check.contrib.migrations",
]

AUTH_USER_MODEL = "users.User"

# django-cors-headers - https://github.com/adamchainz/django-cors-headers#setup
CORS_URLS_REGEX = r"^/api/.*$"
CORS_ORIGIN_REGEX_WHITELIST = env.list(
    "CORS_ORIGIN_REGEX_WHITELIST",
    default=[r"^https:\/\/.+\.fountaicore\.com$", r"^https:\/\/.+\.fount\.co$"],
)
CORS_ALLOW_CREDENTIALS = env.bool("CORS_ALLOW_CREDENTIALS", default=True)
CORS_ALLOW_HEADERS = list(default_headers) + [
    "cache-control",
    "if-modified-since",
    "x-user-agent",
    "content-disposition",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "reversion.middleware.RevisionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "oms.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(APPS_DIR / "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# SECURITY
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter
SECURE_BROWSER_XSS_FILTER = True
# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"

# ADMIN
# ------------------------------------------------------------------------------
# Django Admin URL.
ADMIN_URL = "admin/"

WSGI_APPLICATION = "oms.wsgi.application"

# CACHES
# https://docs.djangoproject.com/en/3.1/topics/cache/
CACHE_BACKEND_DEFAULT = "django_redis.cache.RedisCache"
CACHE_OPTIONS_DEFAULT = {
    "CLIENT_CLASS": "django_redis.client.DefaultClient",
}
CACHES = {
    "default": {
        "BACKEND": CACHE_BACKEND_DEFAULT,
        "LOCATION": env("CACHE_DEFAULT_URL"),
        "KEY_PREFIX": "",
        "OPTIONS": CACHE_OPTIONS_DEFAULT,
    },
    "price": {
        "BACKEND": CACHE_BACKEND_DEFAULT,
        "LOCATION": env("CACHE_PRICE_URL"),
        "KEY_PREFIX": "P",
        "OPTIONS": CACHE_OPTIONS_DEFAULT,
    },
    "account_status": {
        "BACKEND": CACHE_BACKEND_DEFAULT,
        "LOCATION": env("CACHE_DEFAULT_URL"),
        "KEY_PREFIX": "AS",
        "OPTIONS": CACHE_OPTIONS_DEFAULT,
    },
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASE_OPTIONS_DEFAULT = {"init_command": "SET sql_mode='STRICT_TRANS_TABLES'"}
DATABASE_CONN_MAX_AGE_DEFAULT = 60
DATABASES = {"default": env.db("DATABASE_DEFAULT_URL")}
DATABASES["default"]["OPTIONS"] = DATABASE_OPTIONS_DEFAULT
DATABASES["default"]["CONN_MAX_AGE"] = env.int(
    "DATABASE_DEFAULT_CONN_MAX_AGE", DATABASE_CONN_MAX_AGE_DEFAULT
)
DATABASES["accounts"] = env.db("DATABASE_ACCOUNTS_URL")
DATABASES["accounts"]["OPTIONS"] = DATABASE_OPTIONS_DEFAULT
DATABASES["portfolio"] = env.db("DATABASE_PORTFOLIO_URL")
DATABASES["portfolio"]["OPTIONS"] = DATABASE_OPTIONS_DEFAULT

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# STATIC
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#static-root
STATIC_ROOT = str(ROOT_DIR / "staticfiles")
# https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = "/static/"
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
STATICFILES_DIRS = [str(APPS_DIR / "static")]
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Documentation
IS_DOC_ENABLED = env.bool("IS_DOC_ENABLED", default=False)

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "basic": {"type": "basic"},
        "Token": {"type": "apiKey", "name": "Authorization", "in": "header"},
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
    },
    "LOGIN_URL": "/admin/login/",
    "LOGOUT_URL": "/admin/logout/",
    "USE_SESSION_AUTH": True,
    "DOC_EXPANSION": "None",
    "DEEP_LINKING": True,
    "DEFAULT_MODEL_DEPTH": 1,
    "DISPLAY_OPERATION_ID": False,
    "REFETCH_SCHEMA_WITH_AUTH": True,
    "REFETCH_SCHEMA_ON_LOGOUT": True,
}

REDOC_SETTINGS = {"PATH_IN_MIDDLE": True, "REQUIRED_PROPS_FIRST": True}

# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s "
            "%(process)d %(thread)d %(name)s::%(funcName)s %(message)s"
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        }
    },
    "root": {"level": "DEBUG", "handlers": ["console"]},
}

# Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "common.authentication.auth.ExpiringTokenAuthentication",
        "common.authentication.auth.PortalJWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "common.pagenator.StandardPagination",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "JSON_UNDERSCOREIZE": {
        "no_underscore_before_number": True,
    },
}

# Database Route
DATABASE_ROUTERS = ("common.db_routers.AppLabelBaseMappingRouter",)

# Authenticate
EXPIRING_TOKEN_LIFESPAN = 60 * 30

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=90),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=120),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": "FOUNT_INTERNAL_SYSTEM_PROJECTS",
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "email",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(days=90),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=120),
}

CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://localhost:6379/2")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default="redis://localhost:6379/1")
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Seoul"
CELERY_IGNORE_RESULT = True
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

TR_BACKEND = DotDict({"KB": {"HOST": env("TR_BACKEND_KB_HOST")}})
INFOMAX_BACKEND = DotDict({"API_HOST": env("INFOMAX_BACKEND_API_HOST")})
LITCHI_BACKEND = DotDict(
    {
        "API_HOST": env("LITCHI_BACKEND_API_HOST"),
        "API_TOKEN": env("LITCHI_BACKEND_API_TOKEN"),
        "TIMEOUT": env.float("LITCHI_BACKEND_TIMEOUT", 10),
    }
)
LITCHI_ACCOUNT_BACKEND = DotDict(
    {
        "API_HOST": env("LITCHI_ACCOUNT_BACKEND_API_HOST"),
        "API_TOKEN": env("LITCHI_ACCOUNT_BACKEND_API_TOKEN"),
        "TIMEOUT": env.float("LITCHI_ACCOUNT_BACKEND_TIMEOUT", 10),
    }
)

# Order management
ORDER_MANAGEMENT_CHECK_MIN_BASE = env.bool(
    "ORDER_MANAGEMENT_CHECK_MIN_BASE", default=True
)
