# main file is deployment-environment-helm/Tiltfile
print('''
-----------------------------------------------------------------
âœ¨ Read oms TiltFile.
   Path: {tiltfile_path}
-----------------------------------------------------------------
'''.strip().format(tiltfile_path=__file__))
# dir_path = os.path.dirname(os.path.realpath(__file__))

docker_build('274236163287.dkr.ecr.ap-northeast-2.amazonaws.com/aicore-oms-django',
             context='.',
             dockerfile='./Dockerfile',
             live_update=[
                sync('./api', '/app/api'),
                sync('./common', '/app/common'),
                sync('./oms', '/app/oms'),
                sync('./conf', '/'),
                sync('./services', '/app/services'),
                sync('./services', '/app/services'),
                run(
                    'pip install -r /requirements.txt',
                    trigger=['/requirements.txt']
                )
             ]
)

load('ext://restart_process', 'docker_build_with_restart')
docker_build_with_restart('274236163287.dkr.ecr.ap-northeast-2.amazonaws.com/aicore-oms-django-worker',
             context='.',
             dockerfile='./Dockerfile',
             entrypoint='/start-celeryworker',
             live_update=[
                sync('./api', '/app/api'),
                sync('./common', '/app/common'),
                sync('./oms', '/app/oms'),
                sync('./conf', '/'),
                sync('./services', '/app/services'),
                sync('./services', '/app/services'),
                run(
                    'pip install -r /requirements.txt',
                    trigger=['/requirements.txt']
                )
             ]
)

load('ext://uibutton', 'cmd_button', 'text_input', 'location')
pod_exec_script = '''
set -eu
# get k8s pod name from tilt resource name
POD_NAME="$(tilt get kubernetesdiscovery "fount-oms-worker" -ojsonpath='{.status.pods[0].name}')"
kubectl exec "$POD_NAME" -- celery -A oms.celery call -k '{"vendor_code": "kb"}' api.bases.managements.tasks.order_account_selection
'''
cmd_button('fount-oms-worker:podexec',
        argv=['sh', '-c', pod_exec_script],
        resource='fount-oms-worker',
        icon_name='',
        text='Exec order_account_selection',
)

exchange_exec_script = '''
set -eu
POD_NAME="$(tilt get kubernetesdiscovery 'fount-oms-web' -ojsonpath='{.status.pods[0].name}')"
kubectl exec "$POD_NAME" -- celery -A oms.celery call -k '{"vendor_code": "kb", "is_dry_run": false}' api.bases.managements.tasks.exchange_accounts_normal
'''
cmd_button('fount-oms-web:podexec',
        argv=['sh', '-c', exchange_exec_script],
        resource='fount-oms-web',
        icon_name='',
        text='Exec exchange_accounts_normal',
)

cmd_button('fount-oms-web:admin',
    argv=['sh', '-c', 'open http://localhost:30501/admin'],
    resource='fount-oms-web',
    text='Admin',
    inputs=[
        text_input('id', label='id', default='admin@fount.co', placeholder=''),
        text_input('pwd', label='pwd', default='admin', placeholder=''),
    ],
)

cmd_button('fount-oms-web:swagger',
    argv=['sh', '-c', 'open http://localhost:30501/api/v1/swagger/'],
    resource='fount-oms-web',
    text='Swagger',
)

cmd_button('fount-oms-flower:flower',
    argv=['sh', '-c', 'open http://localhost:30502/flower/'],
    resource='fount-oms-flower',
    text='Flower',
    inputs=[
        text_input('id', label='id', default='admin@fount.co', placeholder=''),
        text_input('pwd', label='pwd', default='admin', placeholder=''),
    ],
)

# http://localhost:30500/api/v1/swagger/
# load('ext://uibutton', 'cmd_button')
# cmd_button('fount-oms-web: django damin',
#     argv=['http://localhost:30500/admin/'],
#     resource='fount-oms-web',
#     icon_name='waving_hand',
#     text='id: admin@fount.co, pw: admin',
# )

k8s_resource('fount-oms-web',
             # map one or more local ports to ports on your Pod
             port_forwards=['5001:5000'],
             auto_init=True,
)

# Apply Kubernetes manifests
#   Tilt will build & push any necessary images, re-deploying your
#   resources as they change.
#
#   More info: https://docs.tilt.dev/api.html#api.k8s_yaml
#
# k8s_yaml(['k8s/deployment.yaml', 'k8s/service.yaml'])


# Customize a Kubernetes resource
#   By default, Kubernetes resource names are automatically assigned
#   based on objects in the YAML manifests, e.g. Deployment name.
#
#   Tilt strives for sane defaults, so calling k8s_resource is
#   optional, and you only need to pass the arguments you want to
#   override.
#
#   More info: https://docs.tilt.dev/api.html#api.k8s_resource
#
# k8s_resource('my-deployment',
#              # map one or more local ports to ports on your Pod
#              port_forwards=['5000:8080'],
#              # change whether the resource is started by default
#              auto_init=False,
#              # control whether the resource automatically updates
#              trigger_mode=TRIGGER_MODE_MANUAL
# )


# Run local commands
#   Local commands can be helpful for one-time tasks like installing
#   project prerequisites. They can also manage long-lived processes
#   for non-containerized services or dependencies.
#
#   More info: https://docs.tilt.dev/local_resource.html
#
# local_resource('install-helm',
#                cmd='which helm > /dev/null || brew install helm',
#                # `cmd_bat`, when present, is used instead of `cmd` on Windows.
#                cmd_bat=[
#                    'powershell.exe',
#                    '-Noninteractive',
#                    '-Command',
#                    '& {if (!(Get-Command helm -ErrorAction SilentlyContinue)) {scoop install helm}}'
#                ]
# )


# Extensions are open-source, pre-packaged functions that extend Tilt
#
#   More info: https://github.com/tilt-dev/tilt-extensions
#
# load('ext://git_resource', 'git_checkout')


# Organize logic into functions
#   Tiltfiles are written in Starlark, a Python-inspired language, so
#   you can use functions, conditionals, loops, and more.
#
#   More info: https://docs.tilt.dev/tiltfile_concepts.html
#
# def tilt_demo():
#     # Tilt provides many useful portable built-ins
#     # https://docs.tilt.dev/api.html#modules.os.path.exists
#     if os.path.exists('tilt-avatars/Tiltfile'):
#         # It's possible to load other Tiltfiles to further organize
#         # your logic in large projects
#         # https://docs.tilt.dev/multiple_repos.html
#         load_dynamic('tilt-avatars/Tiltfile')
#     watch_file('tilt-avatars/Tiltfile')
#     git_checkout('https://github.com/tilt-dev/tilt-avatars.git',
#                  checkout_dir='tilt-avatars')


# Edit your Tiltfile without restarting Tilt
#   While running `tilt up`, Tilt watches the Tiltfile on disk and
#   automatically re-evaluates it on change.
#
#   To see it in action, try uncommenting the following line with
#   Tilt running.
# tilt_demo()
